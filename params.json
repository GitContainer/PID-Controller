{
  "name": "PID controller",
  "tagline": "PID controller implementation",
  "body": "## PID controller\r\nA basic python and C++ implementation of a simple PID controller.\r\n\r\nThe class implements a PID controller, however, should you decide to use either a PI or PD controller just set the Kd or Ki parameter, respectively, to zero.\r\n\r\nImplemented methods (python implementation):\r\n- output: returns the calculated PID output given a measurement of the y signal.\r\n- antiWindUp: applies anti-wind up to the PID integral block. Maximum thresholds can be set when initializing the controller.\r\n- transferFunction: returns a transfer function for further block integration or frequency domain analysis.\r\n\r\n### Examples\r\nCheck the file controllerPID_test.py for a simple test.\r\n\r\n**PID control set point and noise rejection plot**\r\n\r\n![figure_3](https://cloud.githubusercontent.com/assets/13961654/12533129/a4a38332-c226-11e5-9469-d2969181c1a1.png)\r\n\r\n**Frequency response plot of a real PID (not an ideal one)**\r\n\r\n![image2](https://cloud.githubusercontent.com/assets/13961654/12492639/7b4f73fc-c081-11e5-9ab2-2e1267b49967.png)\r\n\r\n### License\r\nGNU GPL 3.0 check the license file for more information\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}